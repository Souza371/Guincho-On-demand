// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String   @unique
  password        String
  avatar          String?
  subscriptionPlanId String? @map("subscription_plan_id")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  subscriptionPlan SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  addresses        Address[]
  rides            Ride[]

  @@map("users")
}

model Provider {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  phone           String        @unique
  password        String
  avatar          String?
  cnh             String
  rating          Float         @default(0)
  totalRides      Int           @default(0) @map("total_rides")
  status          ProviderStatus @default(PENDING_APPROVAL)
  isAvailable     Boolean       @default(false) @map("is_available")
  currentLat      Float?        @map("current_lat")
  currentLng      Float?        @map("current_lng")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  vehicleDocuments VehicleDocument[]
  serviceAreas     ServiceArea[]
  rides            Ride[]
  proposals        RideProposal[]

  @@map("providers")
}

model Address {
  id           String  @id @default(cuid())
  userId       String  @map("user_id")
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipcode      String
  latitude     Float
  longitude    Float
  isPrimary    Boolean @default(false) @map("is_primary")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model VehicleDocument {
  id             String   @id @default(cuid())
  providerId     String   @map("provider_id")
  documentType   String   @map("document_type") // 'crlv', 'insurance', 'license'
  documentNumber String   @map("document_number")
  documentUrl    String   @map("document_url")
  expiryDate     DateTime? @map("expiry_date")
  isVerified     Boolean  @default(false) @map("is_verified")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("vehicle_documents")
}

model ServiceArea {
  id              String   @id @default(cuid())
  providerId      String   @map("provider_id")
  city            String
  state           String
  radiusKm        Int      @map("radius_km")
  centerLatitude  Float    @map("center_latitude")
  centerLongitude Float    @map("center_longitude")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("service_areas")
}

model Ride {
  id                   String        @id @default(cuid())
  userId               String        @map("user_id")
  providerId           String?       @map("provider_id")
  serviceType          ServiceType   @map("service_type")
  originLatitude       Float         @map("origin_latitude")
  originLongitude      Float         @map("origin_longitude")
  destinationLatitude  Float?        @map("destination_latitude")
  destinationLongitude Float?        @map("destination_longitude")
  originAddress        String        @map("origin_address")
  destinationAddress   String?       @map("destination_address")
  status               RideStatus    @default(PENDING)
  estimatedPrice       Float?        @map("estimated_price")
  finalPrice           Float?        @map("final_price")
  estimatedTime        Int?          @map("estimated_time") // em minutos
  description          String?
  paymentMethod        PaymentMethod? @map("payment_method")
  paymentStatus        PaymentStatus @default(PENDING) @map("payment_status")
  completedAt          DateTime?     @map("completed_at")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  user      User           @relation(fields: [userId], references: [id])
  provider  Provider?      @relation(fields: [providerId], references: [id])
  proposals RideProposal[]
  payment   Payment?
  ratings   Rating[]

  @@map("rides")
}

model RideProposal {
  id            String         @id @default(cuid())
  rideId        String         @map("ride_id")
  providerId    String         @map("provider_id")
  price         Float
  estimatedTime Int            @map("estimated_time") // em minutos
  message       String?
  status        ProposalStatus @default(PENDING)
  expiresAt     DateTime       @map("expires_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Relacionamentos
  ride     Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("ride_proposals")
}

model Rating {
  id          String   @id @default(cuid())
  rideId      String   @map("ride_id")
  evaluatorId String   @map("evaluator_id") // user_id ou provider_id
  evaluatedId String   @map("evaluated_id") // user_id ou provider_id
  rating      Int      // 1-5
  comment     String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relacionamentos
  ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Payment {
  id                String        @id @default(cuid())
  rideId            String        @unique @map("ride_id")
  amount            Float
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  externalPaymentId String?       @map("external_payment_id")
  commissionAmount  Float         @map("commission_amount")
  providerAmount    Float         @map("provider_amount")
  processedAt       DateTime?     @map("processed_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model SubscriptionPlan {
  id            String  @id @default(cuid())
  name          String
  price         Float
  ridesIncluded Int     @map("rides_included")
  description   String
  features      String[] // Array de features
  isActive      Boolean @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  users User[]

  @@map("subscription_plans")
}

model Admin {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  role        AdminRole
  permissions String[] // Array de permiss√µes
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

// Enums
enum ServiceType {
  LIGHT_TOW
  HEAVY_TOW
  TIRE_CHANGE
  FUEL
  BATTERY
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum ProviderStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  SUSPENDED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}